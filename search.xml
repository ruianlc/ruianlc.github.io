<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在visual studio 2022中构建opencv项目</title>
      <link href="/2022/10/10/build-opencv-project-in-visual-studio-2022/"/>
      <url>/2022/10/10/build-opencv-project-in-visual-studio-2022/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>由于c++中执行效率方面的优势，本身是作为一种底层语言，用于开发各种系统和应用，运行速度相比其他语言（如MATLAB、Python更加快速）。</p><p>opencv作为在图像处理领域最为广泛使用的开源库，功能丰富，执行效率高。本文在windows安装visual studio 2022(vs++) 搭建c&#x2F;c++开发环境，并安装opencv c++版本，使用c++基于opencv库开发图像处理项目。</p><h2 id="vs-安装"><a href="#vs-安装" class="headerlink" title="vs++安装"></a>vs++安装</h2><p>通过下载vs++ installer安装包，直接在本地安装c++开发IDE环境。</p><p>首先在<a href="https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=Community&channel=Release&version=VS2022&source=VSLandingPage&cid=2030&passive=false">此处</a> 下载安装包。</p><p>建立c++桌面开发程序的后续安装过程参考<a href="https://blog.csdn.net/InnerPeaceHQ/article/details/121716088">此文</a> 即可。</p><p>安装过程主要注意选择不同的功能集和工作负载，同时选择安装路径（建议使用默认安装路径）。在窗口的上方还有单个组件、语言包、安装位置这些选项，可以不用管，均为默认值。最后点击安装。</p><p>若后续由其他开发需求，可再次运行此installer，选择其他组件进行安装。</p><h2 id="opencv安装"><a href="#opencv安装" class="headerlink" title="opencv安装"></a>opencv安装</h2><p>由于之前一直使用的opencv-python版本为4.5.5.64，为了使两者尽可能保持一致。安装的opencv c++版本也为4.5.5。下载地址在<a href="https://github.com/opencv/opencv/releases/download/4.5.5/opencv-4.5.5-vc14_vc15.exe">此处</a>。</p><p>opencv的安装主要注意以下两点:</p><ul><li>将opencv添加到环境变量</li><li>设置项目的property，分别在vc++ directories和linker中添加代码源和动态链接库，如下图所示：<br> <img src="https://user-images.githubusercontent.com/114786693/194904623-b9733954-4f07-4b73-9ed7-2254e5ba68b5.png" alt="image"><br> <img src="https://user-images.githubusercontent.com/114786693/194904382-1a28aacf-28a0-461d-b47a-8deb288345d4.png" alt="image"></li></ul><h2 id="示例程序结果"><a href="#示例程序结果" class="headerlink" title="示例程序结果"></a>示例程序结果</h2><p>写了一个opencv读取图像的示例，执行结果如下图所示：<br><img src="https://user-images.githubusercontent.com/114786693/194894601-bd87c02a-f05c-4c15-80f7-b9f4b89821fa.png" alt="image"></p><p>可以看到，成功输出图像结果。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文获得了以下两个成果：</p><ul><li>成功构建了c++开发环境；</li><li>可基于opencv c++开发图像处理应用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vs++ </tag>
            
            <tag> opencv </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mmsegmentation图像分割模型推理grpc调用服务，并通过bat脚本一键部署到新环境</title>
      <link href="/2022/10/07/mmseg-grpc-service-one-key-deploy-with-windows-batch-script/"/>
      <url>/2022/10/07/mmseg-grpc-service-one-key-deploy-with-windows-batch-script/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h2><p>采用mmsegmentation对标注好的训练集图像进行训练，得到最终训练好的图像分割深度学习模型。为了将训练好的模型部署到应用环境，以实现模型推理，并进一步将推理结果用于后续业务分析。本项目从以下三个步骤来完成该项目目的：</p><ul><li>调用训练好的模型，编写业务处理代码，实现推理结果的进一步分析；</li><li>grpc服务搭建，实现跨平台、跨语言的项目服务调用；</li><li>编写windows批处理脚本实现新环境的一键部署。</li></ul><h2 id="模型调用，业务代码编写"><a href="#模型调用，业务代码编写" class="headerlink" title="模型调用，业务代码编写"></a>模型调用，业务代码编写</h2><p>由于模型是采用mmseg进行训练的，调用仍采用mmseg相应的模型调用接口，以实现模型的调用。</p><p>针对模型的推理输出，编写业务代码，实现对推理结果进一步的业务处理。</p><h2 id="grpc服务搭建"><a href="#grpc服务搭建" class="headerlink" title="grpc服务搭建"></a>grpc服务搭建</h2><p>由于模型的调用服务代码均是在windowns平台采用python编写，为了使其能够满足跨平台、跨语言的服务调用，我们采用grpc搭建模型调用服务，使用protobuf对传输数据、请求数据以及响应数据进行定义。下面是本项目所定义的消息结构：</p><pre class="line-numbers language-protobuf" data-language="protobuf"><code class="language-protobuf"><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token punctuation">;</span><span class="token keyword">message</span> <span class="token class-name">ABImage</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">bytes</span> data <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// 图像字节</span>    <span class="token builtin">int32</span> width <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 图像宽度</span>    <span class="token builtin">int32</span> height <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 图像高度</span><span class="token punctuation">&#125;</span><span class="token comment">// 请求的参数</span><span class="token keyword">message</span> <span class="token class-name">PredictRequest</span><span class="token punctuation">&#123;</span>    <span class="token builtin">string</span> model_path <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 模型所在路径</span>    <span class="token builtin">string</span> config_path <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 模型配置文件所在路径</span>    <span class="token builtin">string</span> img_path <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment">// 输入图像路径， 用于模型推理</span>    <span class="token builtin">string</span> redun_id <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment">// 冗余输入头，标记</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义返回的参数</span><span class="token keyword">message</span> <span class="token class-name">PredictRespense</span><span class="token punctuation">&#123;</span>    <span class="token builtin">string</span> redun_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token builtin">bool</span> is_error <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token builtin">string</span> error_message <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token builtin">float</span> res_g_ratio <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token builtin">float</span> res_y_ratio <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token positional-class-name class-name">ABImage</span> image <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义服务接口</span><span class="token keyword">service</span> <span class="token class-name">Predictor</span><span class="token punctuation">&#123;</span>    <span class="token keyword">rpc</span> <span class="token function">predict</span><span class="token punctuation">(</span><span class="token class-name">PredictRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">PredictRespense</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从定义的消息结构可看到，服务调用过程既可传输数值或者字符串型结果，也可传输图像结果。</p><h2 id="windows批处理脚本一键部署"><a href="#windows批处理脚本一键部署" class="headerlink" title="windows批处理脚本一键部署"></a>windows批处理脚本一键部署</h2><p>要将在开发环境编写完成的项目服务代码，部署到新环境中，需要解决以下几个问题：</p><ul><li>项目所需的软件安装包；</li><li>项目的依赖包；</li><li>服务的开启。</li></ul><p>为了提高项目在新环境的服务部署效率，编写了一键部署脚本，仅需执行此脚本即可完成服务的部署和开启。</p><p>本项目所编写的batch脚本：</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">::-- Script to automate deploy deep learning model inferiing service to new environmenrt.@REM 一键部署项目执行环境。使用方法：@REM  - 1.手动安装anaconda安装包，直接next下去，直到安装完成。（注意有一步需要将其添加到环境变量）@REM  - 2.在项目目录下打开anaconda窗口，在命令行输入脚本执行命令：.\easy_deploy.bat（windows批处理脚本）@REM 优点在于，即可以执行DOS命令，也可以执行python环境命令echo &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;开始部署&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;:: 1、配置anaconda的python执行环境:: 根据conda安装地址相应修改set CONDAPATH&#x3D;D:\ProgramData\Anacondacall %CONDAPATH%\Scripts\activate.bat %CONDAPATH%:: 2、配置国内源，提高下载速度call conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;call conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main&#x2F;pip config set global.index-url https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple:: 3、安装项目依赖包pip install numpy terminaltables matplotlib tqdm pandas timm Pillow grpcio&#x3D;&#x3D;1.49.0 protobuf&#x3D;&#x3D;4.21.7 opencv_python_headless&#x3D;&#x3D;4.5.5.64pip install torch&#x3D;&#x3D;1.10.0+cpu torchvision&#x3D;&#x3D;0.11.0+cpu torchaudio&#x3D;&#x3D;0.10.0 -f https:&#x2F;&#x2F;download.pytorch.org&#x2F;whl&#x2F;torch_stable.htmlpip install mmcv-full&#x3D;&#x3D;1.5.0 -f https:&#x2F;&#x2F;download.openmmlab.com&#x2F;mmcv&#x2F;dist&#x2F;cpu&#x2F;torch1.10.0&#x2F;index.htmlecho &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;依赖包下载完成！&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;:: 4、开启grpc服务端python dl_server.pyecho &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;服务启动完成！&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，该脚本可实现环境的配置、依赖包的下载以及服务的开启。需要注意的地方是，在调用每一个conda命令时，要在调用命令前加上<code>call</code>，否则脚本执行完该conda语句就会结束。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>本项目实现了以下三个主要功能：</p><ul><li>深度学习模型的调用推理；</li><li>grpc服务的搭建，实现跨平台、跨语言的服务搭建；</li><li>提供批处理脚本，实现项目服务在新环境的部署与开启。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> mmsegmentation </tag>
            
            <tag> grpc </tag>
            
            <tag> batch script </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客撰写与发表</title>
      <link href="/2022/10/03/hexo-post-deploy/"/>
      <url>/2022/10/03/hexo-post-deploy/</url>
      
        <content type="html"><![CDATA[<h2 id="write-new-post-and-deploy-to-github"><a href="#write-new-post-and-deploy-to-github" class="headerlink" title="write new post and deploy to github"></a>write new post and deploy to github</h2><ol><li><p>Create new post</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$hexo</span> new <span class="token string">"title"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Deploy to github</p></li></ol><ul><li>update message in <code>_config.yml</code></li><li>execute the following hexo commands in bash   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$hexo</span> clean <span class="token operator">&amp;&amp;</span> hexo g<span class="token variable">$hexo</span> server<span class="token variable">$hexo</span> deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Post-font-header定义"><a href="#Post-font-header定义" class="headerlink" title="Post font-header定义"></a>Post font-header定义</h2><h3 id="Detailed-Front-matter-options"><a href="#Detailed-Front-matter-options" class="headerlink" title="Detailed Front-matter options"></a>Detailed Front-matter options</h3><p>Everything in the Front-matter option is <strong>not required</strong>. But I still recommend at least filling in the values of <code>title</code> and <code>date</code>.</p><table><thead><tr><th>Options</th><th>Defaults</th><th>Description</th></tr></thead><tbody><tr><td>title</td><td>Markdown’s file title</td><td>Post title, it is highly recommended to fill in this option</td></tr><tr><td>date</td><td>Date and time when the file created</td><td>Publish time, it is highly recommended to fill in this option, and it is best to ensure that it is globally unique</td></tr><tr><td>author</td><td><code>author</code> in root <code>_config.yml</code></td><td>Post author</td></tr><tr><td>img</td><td>a value in <code>featureImages</code></td><td>Post feature image，For example: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>Recommended post (whether the post is topped), if the <code>top</code> value is <code>true</code>, it will be recommended as a homepage post.</td></tr><tr><td>hide</td><td><code>false</code></td><td>Whether show this post in homepage, if the <code>hide</code> value is <code>true</code>, it will not be showed in homepage.</td></tr><tr><td>cover</td><td><code>false</code></td><td>The <code>v1.0.2</code> version is added to indicate whether the post needs to be added to the homepage carousel cover.</td></tr><tr><td>coverImg</td><td>null</td><td>The new version of <code>v1.0.2</code> indicates that the post needs to display the image path on the cover of the homepage. If not, the default image of the post is used by default.</td></tr><tr><td>password</td><td>null</td><td>The post read the password. If you want to set the reading verification password for the article, you can set the value of <code>password</code>, which must be encrypted with <code>SHA256</code> to prevent others from seeing it. The premise is that the <code>verifyPassword</code> option is activated in the theme’s <code>config.yml</code></td></tr><tr><td>toc</td><td><code>true</code></td><td>Whether TOC is turned on or not, you can turn off the TOC function for an article. The premise is that the <code>toc</code> option is activated in the theme’s <code>config.yml</code></td></tr><tr><td>mathjax</td><td><code>false</code></td><td>Whether to enable math formula support, whether this article starts <code>mathjax</code>, and you need to open it in the theme <code>_config.yml</code> file.</td></tr><tr><td>summary</td><td>null</td><td>Post summary, custom post summary content, if the attribute has a value, the post card summary will display the text, otherwise the program will automatically intercept part of the article as a summary</td></tr><tr><td>categories</td><td>null</td><td>Article classification, the classification of this topic represents a macroscopically large classification, only one article is recommended for one classification.</td></tr><tr><td>tags</td><td>null</td><td>Post label, a post can have multiple labels</td></tr><tr><td>keywords</td><td>Post Title</td><td>Post key Words With SEO</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>Post reprint policy, value could be one of cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint and pay</td></tr></tbody></table><blockquote><p><strong>Note</strong>: </p><ol><li>post’s featured picture will take remainder if not writing the <code>img</code> property, and choose the featured picture of theme to let all of post’s picture <strong>have their own characteristics</strong>.</li><li>The value of <code>date</code> should try to ensure that each article is unique, because <code>Gitalk</code> and <code>Gitment</code> recognize <code>id</code> in this topic are uniquely identified by the value of <code>date</code>.</li><li>If you want to set the ability to read the verification password for the article, you should not only set the value of the password with SHA256 encryption in Front-matter, but also activate the configuration in the theme <code>_config.yml</code>.</li><li>you can define reprint policy for a single article in the front-matter of the specific md file using this key: reprintPolicy</li></ol></blockquote><p>The following are examples of the post’s <code>Front-matter</code>.</p><h3 id="The-simplest-example"><a href="#The-simplest-example" class="headerlink" title="The simplest example"></a>The simplest example</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme Theme introduction<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="The-most-comprehensive-example"><a href="#The-most-comprehensive-example" class="headerlink" title="The most comprehensive example"></a>The most comprehensive example</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme Theme introduction<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> Qi Zhao<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">hide</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> This is the content of your custom post summary. If there is a value for this attribute<span class="token punctuation">,</span> the post card summary will display the text<span class="token punctuation">,</span> otherwise the program will automatically intercept part of the post content as a summary.<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封控期间的菜单</title>
      <link href="/2022/06/01/my-menu-during-shanghai-s-lockdown/"/>
      <url>/2022/06/01/my-menu-during-shanghai-s-lockdown/</url>
      
        <content type="html"><![CDATA[<p>上海在春天的时光里，封控两个多月，而我练就了一手好饭。</p><ul><li>3.14 鲫鱼+煎豆腐、青椒+鸡蛋</li><li>3.15 红烧肉、番茄+鸡蛋；胡萝卜、杏鲍菇</li><li>3.16 鸡翅；胡萝卜、杏鲍菇</li><li>3.26 胡萝卜、黑木耳+花菜</li><li>3.27 茄子+青椒、青椒+鸡蛋</li><li>3.28 茄子+青椒、木耳+花菜</li><li>3.29 胡萝卜+黑木耳+娃娃菜；水饺+鸡蛋</li><li>3.30 番茄+鸡蛋、小青菜；水饺</li><li>3.31 </li><li>4.1  小青菜</li><li>4.3  牛肉、小青菜</li><li>4.4  牛肉、小青菜</li><li>4.5  胡萝卜、小青菜、鸡蛋</li><li>4.6  小青菜、鸡腿</li><li>4.7  面条+鸡蛋+小青菜</li><li>4.8  白萝卜+香菇、小青菜</li><li>4.9  面条+猪肉；鸡腿、番茄+鸡蛋</li><li>4.10 鸡肉+胡萝卜</li><li>4.11 拌面+鸡蛋</li><li>4.12 红烧肉、红烧白萝卜</li><li>4.13 小青菜、西葫芦、黄瓜</li><li>4.14 小青菜、西葫芦+胡萝卜+香肠、土豆</li><li>4.15 猪肉+娃娃菜+白萝卜+粉条+香菇、</li><li>4.16 白萝卜+胡萝卜、青椒+土豆；鸡蛋+香肠+泡面</li><li>4.17 面条+火腿+鸡蛋；猪肉+香菇+娃娃菜+粉条+剩饭；粽子</li><li>4.18 蛋炒饭；黄瓜、小青菜</li><li>4.19 面条+娃娃菜；土豆、包菜+胡萝卜</li><li>4.20 面包、牛奶；青菜、西葫芦、白萝卜；蛋糕</li><li>4.21 面条、鸡蛋+火腿、青菜；咖啡；土豆丝、西葫芦、白萝卜；白木耳+红枣+牛奶</li><li>4.22 面条、鸡蛋+火腿、青菜；土豆片、酱鸭</li><li>4.23 猪肉+娃娃菜+白萝卜+粉条+香菇+火腿、粽子、咖啡</li><li>4.24 黄瓜、小青菜、火腿+鸡蛋</li><li>4.25 椰子、咸蛋+粥</li><li>4.26 胡萝卜+土豆+咸肉；白木耳+红枣+牛奶</li><li>4.27 胡萝卜+土豆+咸肉；白木耳+红枣</li><li>4.28 面条+冬阴功；咸肉+青椒、火腿+鸡蛋</li><li>4.29 泡面+鸡蛋；意面+粽子；泡面+鸡蛋+火腿</li><li>4.30 鸡肉饭+鸡蛋；炒饭+鸡蛋+腊肠；牛奶</li><li>5.1 炒饭+鸡蛋+火腿；黄瓜+胡萝卜+火腿；白木耳+红枣、泡面+火腿+鸡蛋</li><li>5.2 粉条+面条+小白菜+香菇、粽子白木耳+红枣；</li><li>5.3 面条+鸡蛋；腊肠+鸡蛋+青椒、胡萝卜、黄瓜；泡面+香菇+鸡蛋</li><li>5.4 面条+鸡蛋；、粥+火腿+香菇、腊肠+鸡蛋</li><li>5.5 面条+鸡蛋+小白菜；粥+小白菜、腊肠+鸡蛋+香菇；牛奶</li><li>5.6 鸡蛋；粥+小白菜+腊肉、鸡蛋+香菇；黑木耳</li><li>5.7 面条+鸡蛋；鸡蛋+饺子；黑木耳</li><li>5.8 面疙瘩、鸡蛋+火腿；烙饼+蚕豆+黑木耳</li><li>5.9 面条+小白菜+鸡蛋；烙饼+土豆+午餐肉；白木耳+红枣</li><li>5.10 面条+小白菜、鸡蛋+火腿+小青菜；咸肉+包菜、南瓜</li><li>5.11 面条+鸡蛋；包菜+粉丝+鸡蛋、土豆；海底捞</li><li>5.12 面条+鸡蛋；粥+绿豆、西葫芦、包菜;泡面+鸡蛋+香菇</li><li>5.13 面粉+鸡蛋；黑米、西葫芦+火腿+咸肉、黄豆</li><li>5.14 面条+鸡蛋+小青菜；焖饭+腊肠+土豆+咸肉+香菇、猪肉+黑木耳</li><li>5.15 面条+鸡蛋；包菜+洋葱、土豆；面疙瘩</li><li>5.16 黑米、咸肉+包菜、煎鸡蛋；煎饼+黑木耳+香菇</li><li>5.17 面条+鸡蛋；黑米、土豆、小青菜+香菇+黑木耳；绿豆汤</li><li>5.18 全家快餐；香菇+拌面+鸡蛋；绿豆汤；牛奶</li><li>5.19 黑米、包菜+咸肉+洋葱；牛奶</li><li>5.20 面疙瘩+鸡蛋；胡萝卜、青菜+香菇+火腿；拌面+香菇+黑木耳</li><li>5.21 烙饼；土豆、芹菜+火腿+木耳；热干面、拍黄瓜</li><li>5.22 芹菜+火腿+香菇+木耳、紫菜蛋花汤；烙饼</li><li>5.23 热干面、鸡蛋；包菜、黄瓜、火腿、紫菜蛋花汤</li></ul><p>3月下旬开始了封控，到6月1号正式解封。期间，居家办公，几乎每天的疫情志愿者服务，然后自己做饭。忙碌而幸福。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年代记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
